// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStream(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (GrpcService_SayHelloServerStreamClient, error)
	SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_SayHelloClientStreamClient, error)
	SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_SayHelloBidirectionalStreamClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.GrpcService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SayHelloServerStream(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (GrpcService_SayHelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], "/grpc_service.GrpcService/SayHelloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceSayHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_SayHelloServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type grpcServiceSayHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceSayHelloServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_SayHelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[1], "/grpc_service.GrpcService/SayHelloClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceSayHelloClientStreamClient{stream}
	return x, nil
}

type GrpcService_SayHelloClientStreamClient interface {
	Send(*HelloReq) error
	CloseAndRecv() (*MessageList, error)
	grpc.ClientStream
}

type grpcServiceSayHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceSayHelloClientStreamClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceSayHelloClientStreamClient) CloseAndRecv() (*MessageList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_SayHelloBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[2], "/grpc_service.GrpcService/SayHelloBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceSayHelloBidirectionalStreamClient{stream}
	return x, nil
}

type GrpcService_SayHelloBidirectionalStreamClient interface {
	Send(*HelloReq) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type grpcServiceSayHelloBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceSayHelloBidirectionalStreamClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceSayHelloBidirectionalStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	SayHello(context.Context, *NoParam) (*HelloResponse, error)
	SayHelloServerStream(*NamesList, GrpcService_SayHelloServerStreamServer) error
	SayHelloClientStream(GrpcService_SayHelloClientStreamServer) error
	SayHelloBidirectionalStream(GrpcService_SayHelloBidirectionalStreamServer) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) SayHello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGrpcServiceServer) SayHelloServerStream(*NamesList, GrpcService_SayHelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStream not implemented")
}
func (UnimplementedGrpcServiceServer) SayHelloClientStream(GrpcService_SayHelloClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStream not implemented")
}
func (UnimplementedGrpcServiceServer) SayHelloBidirectionalStream(GrpcService_SayHelloBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStream not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.GrpcService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SayHello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SayHelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).SayHelloServerStream(m, &grpcServiceSayHelloServerStreamServer{stream})
}

type GrpcService_SayHelloServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type grpcServiceSayHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceSayHelloServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_SayHelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).SayHelloClientStream(&grpcServiceSayHelloClientStreamServer{stream})
}

type GrpcService_SayHelloClientStreamServer interface {
	SendAndClose(*MessageList) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type grpcServiceSayHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceSayHelloClientStreamServer) SendAndClose(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceSayHelloClientStreamServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcService_SayHelloBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).SayHelloBidirectionalStream(&grpcServiceSayHelloBidirectionalStreamServer{stream})
}

type GrpcService_SayHelloBidirectionalStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type grpcServiceSayHelloBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceSayHelloBidirectionalStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceSayHelloBidirectionalStreamServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GrpcService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStream",
			Handler:       _GrpcService_SayHelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStream",
			Handler:       _GrpcService_SayHelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStream",
			Handler:       _GrpcService_SayHelloBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
